// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WalletIO.Helpers;

namespace WalletIO.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190618190821_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WalletIO.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("BankApi");

                    b.Property<string>("CreatedTimestamp");

                    b.Property<string>("Name");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WalletIO.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EntryTypeId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EntryTypeId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WalletIO.Entities.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<int?>("CategoryId");

                    b.Property<string>("CreatedTimestamp");

                    b.Property<string>("Description");

                    b.Property<decimal>("MoneyAmount");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("WalletIO.Entities.EntryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EntryTypes");
                });

            modelBuilder.Entity("WalletIO.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedTimestamp");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WalletIO.Entities.Account", b =>
                {
                    b.HasOne("WalletIO.Entities.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WalletIO.Entities.Category", b =>
                {
                    b.HasOne("WalletIO.Entities.EntryType", "EntryType")
                        .WithMany("Categories")
                        .HasForeignKey("EntryTypeId");
                });

            modelBuilder.Entity("WalletIO.Entities.Entry", b =>
                {
                    b.HasOne("WalletIO.Entities.Account", "Account")
                        .WithMany("Entries")
                        .HasForeignKey("AccountId");

                    b.HasOne("WalletIO.Entities.Category", "Category")
                        .WithMany("Entries")
                        .HasForeignKey("CategoryId");
                });
#pragma warning restore 612, 618
        }
    }
}
